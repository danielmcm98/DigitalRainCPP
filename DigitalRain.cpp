/*
  ___            _     _  __   ___ _     ___  _     _
 |   \ __ _ _ _ (_)___| | \ \ / / | |   / __|| |_ _| |_
 | |) / _` | ' \| / -_) |  \ V /|_  _| | (_|_   _|_   _|
 |___/\__,_|_||_|_\___|_|   |_|   |_|   \___||_|   |_|

 Digital Rain Project 
 Started: 20/02/2023
*/

#include "DigitalRain.h"
#include <random>
#include <thread>


DigitalRain::DigitalRain(int width, int height, int speed, int wrap_count)//Constructor definition
    : width_(width), height_(height), speed_(speed), wrap_count_(wrap_count),
    pos(width),
    //Chars setup with unicode to make them look cool
    chars("\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x20\x61\x62\x63\x64\x65\x66\x67\x68\x6A\x6B\x6C\xC6\xA2\xC6\xA9\xC6\xB1\xC6\xB8\xC7\x82\xC6\xBD\xC7\x8C\xC8\xA2\xC8\xBE\xC8\xBD\xC9\x91\xC9\xA4\xCA\x91\xCA\xAB\xCA\xA5\xCA\xAE\xCE\xBB\xCE\xB5\xCF\xA0\xCF\x9E\xCF\xA0\xCF\xB0\xD0\x84Є") {
    std::random_device random; //This line creates an object rd of type std::random_device. std::random_device is a random number engine that produces non-deterministic random number
    std::mt19937 mt(random()); //In this line, the Mersenne Twister engine is seeded with a random number generated by the std::random_device object random.
    std::uniform_int_distribution<int> dist(-height, height); //Produces random numbers within the range of -height and height to dsiperese the drops


    for (int i = 0; i < width; ++i) {
        pos[i] = dist(mt); //sets initial y positions
    }
}

void DigitalRain::run() {
    while (wrap_count_ > 0) {
       // system("Color 1B");
        change();
        print();
    }
}

void DigitalRain::change() {//uses range based makes it look like its falling down the screen as uses previous lines, modulus ensures wraps when height reached
    for (int& p : pos) {
        p = (p + 1) % height_;
    }
}

void DigitalRain::print() {
    std::random_device random;
    std::mt19937 mt(random());
    std::uniform_int_distribution<int> dist(0, chars.size() - 1); //Selects random character from chars within specified range
    std::uniform_int_distribution<int> color_dist(31, 37); //generates random number between 1 & 6
    std::uniform_real_distribution<double> space_prob(0, 1); //uniform real distribution for the probability of a space


    std::cout << "\033[" << color_dist(mt) << "m"; // Set the text color usin asni 
    system("cls"); // Clear the console


    auto print_row = [&](int row) {
        for (int i = 0; i < width_; ++i) {
            if (row < pos[i]) {
                if (space_prob(mt) < 0.5) {
                    std::cout << chars[dist(mt)];
                }
                else {
                    std::cout << " ";
                }
            }
            else {
                std::cout << " ";
            }
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(speed_));
        std::cout << '\n';
    };
    while (wrap_count_ > 0) {
        system("cls");
        for (int j = 0; j < height_; ++j) {
            print_row(j);

            if (j == height_ - 1) {
                wrap_count_--;
            }
        }
    }
}